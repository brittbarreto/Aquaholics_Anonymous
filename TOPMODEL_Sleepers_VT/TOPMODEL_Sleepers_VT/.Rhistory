plot(sleepers_flow, type='l', main="2017 Sleepers River", xlab="Hours", ylab="Normalized Flow")
lines(Q, col='blue')
lines(fed_flow, col='red')
sleepers_filter<- z%>%
filter(Date >= "2017-05-12",
Date <= "2017-5-17")
sleepers_flow<-sleepers_filter$flow_mh
plot(sleepers_flow, type='l', main="2017 Sleepers River", xlab="Hours", ylab="Normalized Flow")
lines(sleepers_flow, col='blue')
plot(sleepers_flow, type='l', main="2017 Sleepers River", xlab="Hours", ylab="Normalized Flow")
lines(Q, col='blue')
sleepers_filter<- z%>%
filter(Date >= "2017-05-1",
Date <= "2017-06-22")
sleepers_flow<-sleepers_filter$flow_mh
plot(sleepers_flow, type='l', main="2017 Sleepers River", xlab="Hours", ylab="Normalized Flow")
lines(Q, col='blue')
lines(fed_flow, col='red')
fed_output_filter<- zz%>%
filter(Date >= "2017-05-1",
Date <= "2017-6-22")
fed_flow<-fed_output_filter$model_mhr
plot(fed_flow, type='l')
lines(Q, col='blue')
lines(sleepers_flow, col="red")
fed_sim_flow<- function(s) {
t<-fed_output$model_mhr[s]
return(t)
}
integrate(fed_sim_flow, 312, 400)$value
integrate(fed_sim_flow, 312, 400)$value
integrate(sim_flow, 312, 400)$value
integrate(obs_flow, 312, 400)$value
length(fed_flow)
length(Q)
length(sleepers_flow)
sleep_sim<-topmodel(parameters, sleepers_topidx_class, sleepers_delay_classorder, sleepers_rain, sleepers_ETp, TRUE)
Q<-sleep_sim$Q
Q<-sleep_sim$Q
plot(fed_flow, type='l')
lines(Q, col='blue')
lines(sleepers_flow, col="red")
length(fed_flow)
length(Q)
length(sleepers_flow)
brittany_file<-cbind(fed_flow, Q, sleepers_flow)
write.csv(brittany_file, "C:/Users/Stefany Baron/Documents/GitHub/Aquaholics_Anonymous/TOPMODEL_Sleepers_VT/brittany_file.csv" )
integrate(fed_sim_flow, 312, 400)$value
integrate(sim_flow, 312, 400)$value
integrate(obs_flow, 312, 400)$value
a<-integrate(fed_sim_flow, 312, 400)$value
b<-integrate(sim_flow, 312, 400)$value
c<-integrate(obs_flow, 312, 400)$value
a
b
c
integrate(fed_sim_flow, 312, 400)$value
integrate(sim_flow, 312, 400)$value
integrate(obs_flow, 312, 400)$value
integrate(fed_sim_flow, 590, 630)$value
integrate(sim_flow, 590, 630)$value
integrate(obs_flow, 590, 630)$value
integrate(fed_sim_flow, 1550, 1620)$value
integrate(sim_flow, 1550, 1620)$value
integrate(sim_flow, 1550, 1610)$value
integrate(sim_flow, 1560, 1610)$value
sleepers_filter<- z%>%
filter(Date >= "2017-05-1",
Date <= "2017-06-12")
sleepers_rain<-sleepers_filter$precip_m
sleepers_flow<-sleepers_filter$flow_mh
sleepers_ETp<-sleepers_filter$Etp_mm_hour
sleep_sim<-topmodel(parameters, sleepers_topidx_class, sleepers_delay_classorder, sleepers_rain, sleepers_ETp, TRUE)
Q<-sleep_sim$Q
fed_output<-read.csv("sleepers_20000_1_decay0.015_modelOutput.csv")
zz<-fed_output %>%
mutate(Date = mdy(date))
fed_output_filter<- zz%>%
filter(Date >= "2017-05-1",
Date <= "2017-6-12")
fed_flow<-fed_output_filter$model_mhr
plot(fed_flow, type='l')
lines(Q, col='blue')
lines(sleepers_flow, col="red")
length(fed_flow)
length(Q)
length(sleepers_flow)
fed_sim_flow<- function(s) {
t<-fed_output$model_mhr[s]
return(t)
}
fed_vol<-c()
for ( i in 4:1000){
start1<-i-3
end1<-i+3
fed_volume<-integrate(fed_sim_flow, start1, end1)$value
fed_vol[[i]]<-fed_volume
}
length(fed_vol)
sim_flow<- function(s) {
t<-Q[s]
return(t)
}
sim_vol<-c()
for (u in 4:1000){
start2<-u-3
end2<-u+3
sim_volume<-integrate(sim_flow, start2, end2)$value
sim_vol[[u]]<-sim_volume
}
length(sim_vol)
obs_flow <- function(i) {
j <- sleepers_flow[i]
return(j)
}
obs_vol<-c()
for(h in 4:1000) {
start3<-h-3
end3<-h+3
obs_volume<-integrate(obs_flow, start3, end3)$value
obs_vol[[h]]<-obs_volume
}
length(obs_vol)
vol_table<-cbind(fed_vol, sim_vol, obs_vol)
vol_table<-as.data.frame(vol_table)
fed_error<-((vol_table$fed_vol-vol_table$obs_vol)/vol_table$obs_vol)*100
sim_error<-((vol_table$sim_vol-vol_table$obs_vol)/vol_table$obs_vol)*100
hist(fed_error)
hist(sim_error)
hist(fed_error)
hist(sim_error)
length(fed_flow)
length(Q)
length(sleepers_flow)
plot(fed_flow, type='l')
lines(Q, col='blue')
lines(sleepers_flow, col="red")
integrate(fed_sim_flow, 590, 640)$value
hist(fed_error)
hist(fed_error, bins=10)
hist(sim_error)
hist(fed_error)
plot(fed_flow, type='l')
lines(Q, col='blue')
lines(sleepers_flow, col="red")
integrate(fed_sim_flow, 312, 400)$value
integrate(sim_flow, 312, 400)$value
integrate(obs_flow, 312, 400)$value
integrate(fed_sim_flow, 506, 532)$value
integrate(sim_flow, 506, 532)$value
integrate(obs_flow, 506, 532)$value
integrate(fed_sim_flow, 590, 630)$value
integrate(fed_sim_flow, 590, 630)$value
integrate(sim_flow, 590, 630)$value
integrate(obs_flow, 590, 630)$value
integrate(fed_sim_flow, 733, 770)$value
integrate(sim_flow, 733, 770)$value
integrate(fed_sim_flow, 733, 770)$value
integrate(fed_sim_flow, 733, 770)$value
integrate(sim_flow, 733, 770)$value
integrate(obs_flow, 733, 770)$value
hist(fed_error)
hist(fed_error, breaks=10)
hist(fed_error, breaks=10)
hist(fed_error, breaks=20)
hist(fed_error, breaks=15)
hist(sim_error)
hist(fed_error, breaks=15)
hist(fed_error, breaks=10)
hist(sim_error)
hist(fed_error, breaks=10)
hist(fed_error, breaks=13)
hist(fed_error, breaks=11)
hist(fed_error, breaks=12)
hist(sim_error)
hist(fed_error, breaks=12)
hist(fed_error, breaks=13)
hist(fed_error, breaks=10)
hist(fed_error, breaks=10, main = "Distribution of Error for Alternate Model")
hist(fed_error, breaks=10, main = "Distribution of Error for Alternate Model", xlab = "% Error")
hist(fed_error, breaks=10, main = "Distribution of Error for Alternate Model", xlab = "% Error", ylab = "Frequency")
hist(sim_error)
hist(sim_error, main = "Distribution of Error for TOPMODEL", xlab = "% Error", ylab = "Frequency")
hist(fed_error, breaks=10, main = "Distribution of Error for Alternate Model", xlab = "% Error", ylab = "Frequency")
hist(sim_error, main = "Distribution of Error for TOPMODEL", xlab = "% Error", ylab = "Frequency")
hist(fed_error, breaks=10, main = "Distribution of Error for Alternate Model", xlab = "% Error")
hist(sim_error, main = "Distribution of Error for TOPMODEL", xlab = "% Error")
hist(fed_error, breaks=10, main = "Distribution of Error for Alternate Model", xlab = "% Error")
hist(sim_error, main = "Distribution of Error for TOPMODEL", xlab = "% Error")
hist(fed_error, breaks=10, main = "Distribution of Error for Alternate Model", xlab = "% Error")
hist(sim_error, main = "Distribution of Error for TOPMODEL", xlab = "% Error")
hist(fed_error, breaks=10, main = "Distribution of Error in Volume for Alternate Model", xlab = "% Error")
hist(sim_error, main = "Distribution of Error in Volume for TOPMODEL", xlab = "% Error")
hist(fed_error, breaks=10, main = "Distribution of Error in Volume for Alternate Model", xlab = "% Error")
library(readxl)
library(topmodel)
library(Hmisc)
library(tiff)
library(raster)
library(rgdal)
library(dplyr)
library(lubridate)
raster<-'w_3_DEM.tif'
demVT <-raster(raster)
plot(demVT)
demVT <-as.matrix(demVT)
is.na(demVT)
sleepers_topidx<-topidx(demVT, 10)$atb
sleepers_topidx_class<-make.classes(sleepers_topidx, 18)
sleepers_topidx_class
plot(sleepers_topidx_class)
sleepers_data<-read.csv("Sleepers_Data_0401_1026.csv")
View(sleepers_data)
z<-sleepers_data %>%
mutate(Date = mdy(date))
sleepers_filter<- z%>%
filter(Date >= "2017-05-1",
Date <= "2017-06-12")
sleepers_rain<-sleepers_filter$precip_m
sleepers_flow<-sleepers_filter$flow_mh
sleepers_ETp<-sleepers_filter$Etp_mm_hour
k<-10
sleepers_delay_flowlength<-flowlength(demVT)*10
sleepers_delay_class<-make.classes(sleepers_delay_flowlength,k)
sleepers_delay_class
plot(sleepers_delay_class)
sleepers_delay_classorder<- sleepers_delay_class[k:1,]
sleepers_delay_classorder
sleepers_delay_classorder[,2] <- c(0, cumsum(sleepers_delay_classorder[1:(k-1),2]))
sleepers_delay_classorder
n <- 1
qs0 <- runif(n, min =  3.926510e-06, max =  3.926510e-06)
lnTe <- runif(n, min = -1.196998e+00, max = -1.196998e+00)
m <- runif(n, min = 2.787428e-02 , max = 2.787428e-02 )
Sr0 <- runif(n, min = 8.382271e-04, max = 8.382271e-04)
Srmax <- runif(n, min = 4.538280e-03, max = 4.538280e-03)
td <- runif(n, min = 1.650550e-01, max = 1.650550e-01)
vch <- runif(n, min = 1.074347e+02, max = 1.074347e+02)
vr <- runif(n, min = 2.012713e+02, max = 2.012713e+02)
k0 <- runif(n, min = 2.101055e-01, max = 2.101055e-01)
CD <- runif(n, min = 4.125508e+00, max = 4.125508e+00)
dt <- 24
parameters <- cbind(qs0,lnTe,m,Sr0,Srmax,td,vch,vr,k0,CD,dt)
sleep_sim<-topmodel(parameters, sleepers_topidx_class, sleepers_delay_classorder, sleepers_rain, sleepers_ETp, TRUE)
Q<-sleep_sim$Q
qo<-sleep_sim$qo
qs<-sleep_sim$qs
plot(sleepers_flow, type='l', main="2017 Sleepers River", xlab="Hours", ylab="Normalized Flow")
plot(Q, type='l', main="2017 Sleepers River", xlab="Hours", ylab="Normalized Flow")
plot(sleepers_flow, type='l', main="2017 Sleepers River", xlab="Hours", ylab="Normalized Flow")
lines(Q, col='blue')
NSeff(sleepers_flow, Q)
fed_output<-read.csv("sleepers_20000_1_decay0.02787428_modelOutput.csv")
zz<-fed_output %>%
mutate(Date = mdy(date))
fed_output_filter<- zz%>%
filter(Date >= "2017-05-1",
Date <= "2017-6-12")
fed_flow<-fed_output_filter$model_mhr
fed_flow<-fed_output_filter$model_mmhr
plot(fed_flow, type='l')
plot(fed_flow/1000, type='l')
lines(Q, col='blue')
lines(sleepers_flow, col="red")
length(fed_flow)
length(Q)
length(sleepers_flow)
plot(fed_flow, type='l')
fed_flow<-fed_output_filter$model_mmhr
plot(fed_flow, type='l')
max(fed_flow)
fed_flow[3.903205]
fed_flow[3]
lines(sleepers_flow, col='blue')
plot(Q, type='l', main="2017 Sleepers River", xlab="Hours", ylab="Normalized Flow")
lines(sleepers_flow, col='blue')
fed_flow[3]
fed_output_filter<- zz%>%
filter(Date >= "2017-04-30",
Date <= "2017-6-12")
sleepers_filter<- z%>%
filter(Date >= "2017-04-30",
Date <= "2017-06-12")
sleepers_rain<-sleepers_filter$precip_m
sleepers_flow<-sleepers_filter$flow_mh
sleepers_ETp<-sleepers_filter$Etp_mm_hour
sleep_sim<-topmodel(parameters, sleepers_topidx_class, sleepers_delay_classorder, sleepers_rain, sleepers_ETp, TRUE)
Q<-sleep_sim$Q
qo<-sleep_sim$qo
qs<-sleep_sim$qs
plot(sleepers_flow, type='l', main="2017 Sleepers River", xlab="Hours", ylab="Normalized Flow")
plot(Q, type='l', main="2017 Sleepers River", xlab="Hours", ylab="Normalized Flow")
lines(sleepers_flow, col='blue')
legend("topright", legend=c("modeled", "observed"),
col=c("black", "blue"), lty=1, cex=0.9)
NSeff(sleepers_flow, Q)
fed_output<-read.csv("sleepers_20000_1_decay0.02787428_modelOutput.csv")
zz<-fed_output %>%
mutate(Date = mdy(date))
fed_output_filter<- zz%>%
filter(Date >= "2017-04-30",
Date <= "2017-6-12")
fed_flow<-fed_output_filter$model_mmhr
plot(fed_flow, type='l')
lines(Q, col='blue')
lines(sleepers_flow, col="red")
length(fed_flow)
length(Q)
length(sleepers_flow)
plot(fed_flow, type='l')
lines(Q, col='blue')
lines(sleepers_flow, col="red")
plot(sleepers_flow, type='l', main="2017 Sleepers River", xlab="Hours", ylab="Normalized Flow")
plot(Q, type='l', main="2017 Sleepers River", xlab="Hours", ylab="Normalized Flow")
plot(fed_flow/1000, type='l')
lines(Q, col='blue')
lines(sleepers_flow, col="red")
fed_output<-read.csv("sleepers_20000_1_decay0.015_modelOutput.csv")
zz<-fed_output %>%
mutate(Date = mdy(date))
fed_output_filter<- zz%>%
filter(Date >= "2017-04-30",
Date <= "2017-6-12")
fed_flow<-fed_output_filter$model_m3hr
lines(fed_flow, col="green")
plot(sleepers_flow, type='l', main="2017 Sleepers River", xlab="Hours", ylab="Normalized Flow")
lines(Q, col='blue')
lines(fed_flow, col="green")
plot(fed_flow)
plot(fed_flow, type = l)
plot(fed_flow, type = "l")
plot(fed_flow, type = "l")
fed_output<-read.csv("sleepers_20000_1_decay0.02787428_modelOutput.csv")
zz<-fed_output %>%
mutate(Date = mdy(date))
fed_output_filter<- zz%>%
filter(Date >= "2017-04-30",
Date <= "2017-6-12")
fed_flow<-fed_output_filter$model_mmhr
plot(fed_flow/1000, type='l')
lines(Q, col='blue')
lines(sleepers_flow, col="red")
plot(fed_flow, type='l')
lines(Q*1000, col='blue')
lines(sleepers_flow*1000, col="red")
plot(fed_flow, type='l')
lines(Q*1000, col='blue')
length(fed_flow)
length(Q)
length(sleepers_flow)
fed_sim_flow<- function(s) {
t<-fed_output$model_mhr[s]
return(t)
}
fed_vol<-c()
for ( i in 4:1000){
start1<-i-3
end1<-i+3
fed_volume<-integrate(fed_sim_flow, start1, end1)$value
fed_vol[[i]]<-fed_volume
}
fed_vol
integrate(fed_sim_flow, 450,460)
fed_sim_flow<- function(s) {
t<-fed_flow[s]
return(t)
}
integrate(fed_sim_flow, 450,460)
fed_vol<-c()
for ( i in 4:1000){
start1<-i-3
end1<-i+3
fed_volume<-integrate(fed_sim_flow, start1, end1)$value
fed_vol[[i]]<-fed_volume
}
fed_vol
length(fed_vol)
sim_flow<- function(s) {
t<-Q[s]
return(t)
}
sim_vol<-c()
for (u in 4:1000){
start2<-u-3
end2<-u+3
sim_volume<-integrate(sim_flow, start2, end2)$value
sim_vol[[u]]<-sim_volume
}
sim_vol
length(sim_vol)
obs_flow <- function(i) {
j <- sleepers_flow[i]
return(j)
}
obs_vol<-c()
for(h in 4:1000) {
start3<-h-3
end3<-h+3
obs_volume<-integrate(obs_flow, start3, end3)$value
obs_vol[[h]]<-obs_volume
}
obs_vol
length(obs_vol)
fed_error<-((vol_table$fed_vol-vol_table$obs_vol)/vol_table$obs_vol)*100
vol_table<-cbind(fed_vol, sim_vol, obs_vol)
vol_table<-as.data.frame(vol_table)
fed_error<-((vol_table$fed_vol-vol_table$obs_vol)/vol_table$obs_vol)*100
sim_error<-((vol_table$sim_vol-vol_table$obs_vol)/vol_table$obs_vol)*100
hist(fed_error, breaks=10, main = "Distribution of Error in Volume for Alternate Model", xlab = "% Error")
hist(sim_error, main = "Distribution of Error in Volume for TOPMODEL", xlab = "% Error")
hist(fed_error, breaks=10, main = "Distribution of Error in Volume for Alternate Model", xlab = "% Error")
integrate(fed_sim_flow, 733, 770)$value
integrate(fed_sim_flow, 733, 750)$value
integrate(sim_flow, 733, 750)$value
integrate(obs_flow, 733, 750)$value
hist(fed_error, breaks=10, main = "Distribution of Error in Volume for Alternate Model", xlab = "% Error")
hist(sim_error, main = "Distribution of Error in Volume for TOPMODEL", xlab = "% Error")
hist(fed_error, breaks=10, main = "Distribution of Error in Volume for Alternate Model", xlab = "% Error")
hist(fed_error, breaks=20, main = "Distribution of Error in Volume for Alternate Model", xlab = "% Error")
hist(fed_error, breaks=30, main = "Distribution of Error in Volume for Alternate Model", xlab = "% Error")
hist(fed_error, breaks=40, main = "Distribution of Error in Volume for Alternate Model", xlab = "% Error")
fed_output<-read.csv("sleepers_20000_1_decay0.015_modelOutput.csv")
zz<-fed_output %>%
mutate(Date = mdy(date))
fed_output_filter<- zz%>%
filter(Date >= "2017-04-30",
Date <= "2017-6-12")
fed_output<-read.csv("sleepers_20000_1_decay0.02787428_modelOutput.csv")
zz<-fed_output %>%
mutate(Date = mdy(date))
fed_output_filter<- zz%>%
filter(Date >= "2017-04-30",
Date <= "2017-6-12")
fed_flow<-fed_output_filter$model_mmhr
plot(fed_flow, type='l')
fed_flow<-fed_output_filter$model_mmhr/1000
plot(fed_flow, type='l')
fed_sim_flow<- function(s) {
t<-fed_flow[s]
return(t)
}
integrate(fed_sim_flow, 450,460)
fed_vol<-c()
for ( i in 4:1000){
start1<-i-3
end1<-i+3
fed_volume<-integrate(fed_sim_flow, start1, end1)$value
fed_vol[[i]]<-fed_volume
}
fed_vol
length(fed_vol)
vol_table<-cbind(fed_vol, sim_vol, obs_vol)
vol_table<-as.data.frame(vol_table)
fed_error<-((vol_table$fed_vol-vol_table$obs_vol)/vol_table$obs_vol)*100
sim_error<-((vol_table$sim_vol-vol_table$obs_vol)/vol_table$obs_vol)*100
hist(fed_error, breaks=10, main = "Distribution of Error in Volume for Alternate Model", xlab = "% Error")
hist(sim_error, main = "Distribution of Error in Volume for TOPMODEL", xlab = "% Error")
hist(fed_error, breaks=10, main = "Distribution of Error in Volume for Alternate Model", xlab = "% Error")
hist(fed_error, breaks=20, main = "Distribution of Error in Volume for Alternate Model", xlab = "% Error")
integrate(fed_sim_flow, 733, 750)$value
integrate(sim_flow, 733, 750)$value
integrate(obs_flow, 733, 750)$value
integrate(fed_sim_flow, 312, 400)$value
integrate(fed_sim_flow, 336, 424)$value
integrate(sim_flow, 336, 434)$value
integrate(obs_flow, 336, 424)$value
plot(fed_flow, type='l')
lines(sleepers_flow, col="red")
plot(fed_flow*1000, type='l')
lines(Q, col='blue')
lines(sleepers_flow, col="red")
plot(fed_flow, type='l')
lines(sleepers_flow, col="red")
hist(sim_error, main = "Distribution of Error in Volume for TOPMODEL", xlab = "% Error")
integrate(fed_sim_flow, 336, 424)$value
integrate(sim_flow, 336, 424)$value
integrate(obs_flow, 336, 424)$value
integrate(fed_sim_flow, 530, 556)$value
integrate(fed_sim_flow, 530, 556)$value
integrate(sim_flow, 530, 556)$value
integrate(obs_flow, 530, 556)$value
integrate(fed_sim_flow, 614, 654)$value
integrate(sim_flow, 614, 654)$value
integrate(obs_flow, 614, 654)$value
integrate(fed_sim_flow, 757, 794)$value
integrate(sim_flow, 757, 794)$value
integrate(obs_flow, 757, 794)$value
plot(sleepers_flow, type='l', main="2017 Sleepers River", xlab="Hours", ylab="Normalized Flow")
sleepers_filter<- z%>%
filter(Date >= "2017-04-30",
Date <= "2017-06-12")
sleepers_rain<-sleepers_filter$precip_m
sleepers_flow<-sleepers_filter$flow_mh
sleepers_ETp<-sleepers_filter$Etp_mm_hour
sleep_sim<-topmodel(parameters, sleepers_topidx_class, sleepers_delay_classorder, sleepers_rain, sleepers_ETp, TRUE)
Q<-sleep_sim$Q
qo<-sleep_sim$qo
qs<-sleep_sim$qs
S<-sleep_sim$S
plot(sleepers_flow, type='l', main="2017 Sleepers River", xlab="Hours", ylab="Normalized Flow")
plot(Q, type='l', main="2017 Sleepers River", xlab="Hours", ylab="Normalized Flow")
lines(sleepers_flow, col='blue')
legend("topright", legend=c("modeled", "observed"),
col=c("black", "blue"), lty=1, cex=0.9)
lines(fed_flow, col='red')
NSeff(sleepers_flow, Q)
output_date<- as.data.frame(sleepers_filter$Date)
output_time<-as.data.frame(sleepers_filter$Time)
output_observed<-as.data.frame(sleepers_filter$flow_mh)
output_Q<-as.data.frame(sleep_sim$Q)
outputs<-dplyr::bind_cols(output_date, output_time, output_observed, output_Q)
write.csv(outputs, "C:/Users/Stefany Baron/Documents/GitHub/Aquaholics_Anonymous/TOPMODEL_Sleepers_VT/Brittany_sleepers.csv" )
